generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  email        String         @unique
  password     String
  role         Role           @default(USER)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  avatar       String?
  favorite     Favorite[]
  recipes      Recipe[]
  RefreshToken RefreshToken[]
}

model Recipe {
  id          Int          @id @default(autoincrement())
  title       String       @db.VarChar(255)
  description String
  tips        String?
  image       String?
  difficulty  Difficulty
  category    Category
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      Int?
  favorite    Favorite[]
  ingredients Ingredient[]
  nutrition   Nutrition?
  user        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  steps       Steps[]
}

model Ingredient {
  id       Int    @id @default(autoincrement())
  name     String
  recipeId Int
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model Steps {
  id          Int    @id @default(autoincrement())
  description String
  recipeId    Int
  recipe      Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model Favorite {
  id       Int    @id @default(autoincrement())
  userId   Int
  recipeId Int
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
}

model Nutrition {
  id       Int    @id @default(autoincrement())
  calories Int?
  protein  Float?
  fat      Float?
  carbs    Float?
  recipeId Int    @unique
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  hashToken String   @unique
  userId    Int
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum Category {
  Makanan_Berat
  Makanan_Ringan
  Kue
}

enum Difficulty {
  Mudah
  Sedang
  Sulit
}
